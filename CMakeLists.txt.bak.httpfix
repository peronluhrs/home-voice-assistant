cmake_minimum_required(VERSION 3.10)
project(home_voice_assistant LANGUAGES CXX)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

# Options (TOUTES OFF par défaut, sauf CURL pour garder l'HTTP quand dispo)
option(WITH_CURL   "Use libcurl for HTTP requests" ON)
option(WITH_HTTP   "Enable built-in HTTP/WS API" ON)
option(WITH_HTTP   "Enable built-in HTTP/WS API" ON)
option(WITH_AUDIO  "Enable PortAudio capture/playback" OFF)
option(WITH_VOSK   "Enable Vosk ASR backend" OFF)
option(WITH_WHISPER "Enable whisper.cpp ASR backend" OFF)  # stub/optionnel
option(WITH_PIPER  "Enable Piper TTS backend (CLI)" OFF)

# Sources de base (texte uniquement)
set(SRCS
  src/main.cpp
  src/Env.cpp
  src/OpenAIClient.cpp
  src/Utils.cpp
  src/dr_wav_impl.cpp
  src/Memory.cpp
)

# Audio / ASR / TTS optionnels (n'ajoute les .cpp que si l'option est active)
if (WITH_AUDIO)
  list(APPEND SRCS src/Audio.cpp)
endif()

if (WITH_VOSK)
  list(APPEND SRCS src/AsrVosk.cpp)
endif()

if (WITH_PIPER)
  list(APPEND SRCS src/TtsPiper.cpp)
endif()

if (WITH_HTTP)
endif()

if (WITH_HTTP)
  add_definitions(-DWITH_HTTP=1)
  list(APPEND SRCS src/HttpServer.cpp)
  include_directories(third_party)
  find_package(Threads REQUIRED)
  set(EXTRA_THREADS Threads::Threads)
endif()
add_executable(home_assistant ${SRCS})

if (WITH_PIPER)
  target_compile_definitions(home_assistant PRIVATE WITH_PIPER=1)
endif()

if (WITH_HTTP)
    add_compile_definitions(home_assistant PRIVATE WITH_HTTP=1)
    target_include_directories(home_assistant PRIVATE third_party include)
endif()

# Headers locaux + éventuel third_party (nlohmann/json.hpp, etc.)
target_include_directories(home_assistant PRIVATE include third_party)

# ----- CURL rétro-compatible (ne JAMAIS forcer CURL::libcurl en string) -----
if (WITH_CURL)
  find_package(CURL)
  if (CURL_FOUND)
    target_compile_definitions(home_assistant PRIVATE HAVE_CURL=1)
    if (TARGET CURL::libcurl) # nouveaux FindCURL
      target_link_libraries(home_assistant PRIVATE CURL::libcurl)
    else()                    # anciens FindCURL (CMake 3.10)
      target_include_directories(home_assistant PRIVATE ${CURL_INCLUDE_DIRS})
      target_link_libraries(home_assistant PRIVATE ${CURL_LIBRARIES})
    endif()
  else()
    message(WARNING "libcurl not found. Building without HTTP support (offline echo mode).")
  endif()
endif()

# ----- PortAudio optionnel (sans Find module officiel) -----
if (WITH_AUDIO)
  # On tente d'abord find_library/find_path simples
  find_path(PORTAUDIO_INCLUDE_DIR portaudio.h)
  find_library(PORTAUDIO_LIBRARY portaudio)
  if (PORTAUDIO_INCLUDE_DIR AND PORTAUDIO_LIBRARY)
    target_compile_definitions(home_assistant PRIVATE WITH_AUDIO=1)
    target_include_directories(home_assistant PRIVATE ${PORTAUDIO_INCLUDE_DIR})
    target_link_libraries(home_assistant PRIVATE ${PORTAUDIO_LIBRARY})
  else()
    message(WARNING "PortAudio not found. Audio will be disabled at runtime.")
  endif()
endif()

# ----- Vosk optionnel -----
if (WITH_VOSK)
  find_path(VOSK_INCLUDE_DIR vosk_api.h)
  find_library(VOSK_LIBRARY vosk)
  if (VOSK_INCLUDE_DIR AND VOSK_LIBRARY)
    target_compile_definitions(home_assistant PRIVATE WITH_VOSK=1)
    target_include_directories(home_assistant PRIVATE ${VOSK_INCLUDE_DIR})
    target_link_libraries(home_assistant PRIVATE ${VOSK_LIBRARY})
  else()
    message(FATAL_ERROR "Vosk not found. Set -DVOSK_INCLUDE_DIR and -DVOSK_LIBRARY, or disable with -DWITH_VOSK=OFF.")
  endif()
endif()

# Whisper : rien à brancher pour l'instant

# --- GCC 7 compatibility: std::filesystem needs stdc++fs ---
if (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
  if (CMAKE_CXX_COMPILER_VERSION VERSION_LESS 8.0)
    target_link_libraries(home_assistant PRIVATE stdc++fs)
  endif()
endif()
target_link_libraries(home_assistant PRIVATE ${EXTRA_THREADS})
